{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **B√†i 1**\n","ƒê·ªçc file [IMDB Movies](https://raw.githubusercontent.com/hungpq7/data-chilly/main/data/imdb_movies.csv) v√† th·ª±c hi·ªán c√°c y√™u c·∫ßu sau:\n","- X√≥a c·ªôt `metascore` v√† `original_title`.\n","- T·∫°o th√™m c·ªôt `group_duration` v·ªõi c√°c gi√° tr·ªã: `short` - d∆∞·ªõi 90 ph√∫t, `medium` - t·ª´ 90 ƒë·∫øn 120 ph√∫t v√† `long` - tr√™n 120 ph√∫t."],"metadata":{"id":"_Hn8bbtGR9at"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"XBYzHpdLZJKJ"},"outputs":[],"source":["import pandas as pd\n","df_imdb = pd.read_csv(\"https://raw.githubusercontent.com/hungpq7/data-chilly/main/data/imdb_movies.csv\")\n","\n","df = df_imdb.copy()\n","\n","# task 1\n","df = df.drop(columns=['metascore', 'original_title'])\n","\n","# task 2\n","def map_duration(x):\n","    if x < 90:\n","        return 'short'\n","    elif x < 120:\n","        return 'medium'\n","    else:\n","        return 'long'\n","df['group_duration'] = df['duration'].map(map_duration)"]},{"cell_type":"code","source":[],"metadata":{"id":"G54Hq-2cOn0V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **B√†i 2**\n","\n","- T√°ch c·ªôt `genre` th√†nh c√°c c·ªôt `genre_1`, `genre_2`,... t∆∞∆°ng ·ª©ng v·ªõi c√°c nh√≥m th·ªÉ lo·∫°i.\n","- Bi·∫øt ng√¥n ng·ªØ ƒë·∫ßu ti√™n trong c·ªôt `language` l√† ng√¥n ng·ªØ ch√≠nh c·ªßa phim, t·∫°o c·ªôt `main_language` v·ªõi gi√° tr·ªã ƒë·∫ßu ti√™n ƒë√≥\n","- T√°ch l·∫•y ph·∫ßn s·ªë trong c·ªôt `imbd_title_id`. *G·ª£i √Ω: 2 k√Ω t·ª± ƒë·∫ßu ti√™n trong c·ªôt n√†y lu√¥n l√† `tt`.*\n","- Chuy·ªÉn c·ªôt `usa_gross_income` v·ªÅ ƒë√∫ng ki·ªÉu d·ªØ li·ªáu `float`. *G·ª£i √Ω: d√πng method `str.replace()` ƒë·ªÉ lo·∫°i b·ªè h·∫øt c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë*."],"metadata":{"id":"8OeGe6GoUCS_"}},{"cell_type":"code","source":["import pandas as pd\n","df_imdb = pd.read_csv(\"https://raw.githubusercontent.com/hungpq7/data-chilly/main/data/imdb_movies.csv\")\n","\n","# task 1\n","df_imdb[['genre_1', 'genre_2', 'genre_3']] = df_imdb['genre'].str.split(', ', expand=True)\n","\n","# task 2\n","df_imdb['main_language'] = df_imdb['language'].str.split(', ').str[0]\n","\n","# task 3\n","df_imdb['title_no'] = df_imdb['imdb_title_id'].str[2:]\n","\n","# task 4\n","df_imdb['usa_gross_income'] = df_imdb['usa_gross_income'].str.replace('$', '').str.replace(',', '').str.replace(' ', '').astype(float)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8TzVX7bXJeVK","executionInfo":{"status":"ok","timestamp":1694786939450,"user_tz":-420,"elapsed":904,"user":{"displayName":"Data Chilly","userId":"00857332948930478291"}},"outputId":"51612e81-fa6a-48d9-fce0-03854ceed6e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-16-6c98972ab3c5>:14: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n","  df_imdb['usa_gross_income'] = df_imdb['usa_gross_income'].str.replace('$', '').str.replace(',', '').str.replace(' ', '').astype(float)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"sAA2fhhUS0Ec"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **B√†i 3**\n","- T·∫°o th√™m c·ªôt `month_published` v·ªõi ƒë·ªãnh d·∫°ng `MM-YYYY`\n","- T·∫°o c√°c c·ªôt periodic v·ªÅ th·ªùi gian d·ª±a tr√™n c·ªôt `date`\n","- T√≠nh kho·∫£ng c√°ch theo nƒÉm t·ª´ ng√†y publish ƒë·∫øn hi·ªán t·∫°i"],"metadata":{"id":"M2U7QyqaVdS7"}},{"cell_type":"code","source":["import pandas as pd\n","df_imdb = pd.read_csv(\"https://raw.githubusercontent.com/hungpq7/data-chilly/main/data/imdb_movies.csv\")\n","df_imdb['date_published'] = df_imdb['date_published'].astype('datetime64')\n","\n","# task 1\n","df_imdb['month_published'] = df_imdb['date_published'].dt.strftime('%m-%Y')\n","\n","# task 2\n","df_imdb['quarter'] = df_imdb['date_published'].dt.quarter\n","df_imdb['month'] = df_imdb['date_published'].dt.month\n","df_imdb['day'] = df_imdb['date_published'].dt.day\n","df_imdb['hour'] = df_imdb['date_published'].dt.hour\n","df_imdb['minute'] = df_imdb['date_published'].dt.minute\n","df_imdb['second'] = df_imdb['date_published'].dt.second\n","df_imdb['weekday'] = df_imdb['date_published'].dt.day_name()\n","df_imdb['month_name'] = df_imdb['date_published'].dt.month_name()\n","\n","df_imdb['years_since_published'] = pd.Timestamp.now().year - df_imdb['date_published'].dt.year"],"metadata":{"id":"VncLRFbNEqbu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1w4ouCOPWLov"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **ü•á B√†i 4**\n","**Regular expression** (regex) l√† m·ªôt d·∫°ng string ƒë·∫∑c bi·ªát cho ph√©p x√°c ƒë·ªãnh pattern c·ªßa d·ªØ li·ªáu text. V√≠ d·ª•: regex pattern `d.*a` (xem th√™m t·∫°i [regex101]) kh·ªõp v·ªõi b·∫•t k·ª≥ t·ª´ n√†o b·∫Øt ƒë·∫ßu b·∫±ng `d` v√† k·∫øt th√∫c b·∫±ng `a` nh∆∞ `data`, `delta`, `drama`. H√£y nghi√™n c·ª©u regex v√† √°p d·ª•ng trong ph∆∞∆°ng th·ª©c `str.replace()` c·ªßa Pandas ƒë·ªÉ l√†m s·∫°ch bi·∫øn `usa_gross_income`.\n","\n","[regex101]: https://regex101.com/r/uJmnOy/1"],"metadata":{"id":"JFjwL7pWWMuL"}},{"cell_type":"code","source":["import pandas as pd\n","df_imdb = pd.read_csv(\"https://raw.githubusercontent.com/hungpq7/data-chilly/main/data/imdb_movies.csv\")\n","\n","df_imdb['usa_gross_income'].str.replace('\\D+', '', regex=True).astype(float)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"plbOnufdMim1","executionInfo":{"status":"ok","timestamp":1694787904385,"user_tz":-420,"elapsed":566,"user":{"displayName":"Data Chilly","userId":"00857332948930478291"}},"outputId":"d9f4c6e8-c1ab-4c01-a03b-307e0c08dd4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0        47121859.0\n","1               NaN\n","2               NaN\n","3               NaN\n","4               NaN\n","            ...    \n","42559           NaN\n","42560           NaN\n","42561           NaN\n","42562           NaN\n","42563           NaN\n","Name: usa_gross_income, Length: 42564, dtype: float64"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":[],"metadata":{"id":"yaEyUoWVrkq3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **B√†i 5**\n","L√†m 5 quiz ƒë·∫ßu ti√™n tr√™n trang Regex 101 t·∫°i: https://regex101.com/quiz/12."],"metadata":{"id":"l4J8dDZZrk3G"}}]}